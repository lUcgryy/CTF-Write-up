from Crypto.Util.number import *

N = 3133747175279642190896051113176211447011242649559137557116584507454785571074644664457028193758917999457019920095009138174578757601358711103322142255954008997654147644017809287900741049788165942652429218036951672723134467756132130964595736081261455916148077169235233155104145729646918976315809305805011252797112614182729817514550869687742762684764301206760400997385014274309558444334670544141303884213529105560228293622507575055620547845897094068411578953184341507728339247070004987362012004529709451543090188982180936780574554566047569732721596175430432382834478583611151740720224784939876505471636897295443170454098421807625159491636224192017095690558920404315377430348652231272555449794011586539679515912215389549067250236386998651267661167839758063827806586516415663976832503218614930380890296397471952616495588183896293925664773405349907148863068622795837473142008666901241538224597152401457281662704889892517875743973347
ct = 1152439195908879595391573163419260712197968810779380123277439351761961488882503136788231482059055955488195884793835099504377077715112373333831614415479930668796572418707328625192886374156975321573626259169944253458336449570907485562744357612001062172084717151866377632925750291862381949555237384130008291647403121126914160058464047229665716813768900934006921794709648426967451966095602426625038897125328079158499933924801757448131959078759745666927484636911240086917887260698992173084017717489488216786238877069006436570636886147006306805985713838083052778236051845973250396812175297270782842720395234073706206863582126324044387653985008116728867696759160410888773410116399844033420413176589643884465644828991845998801296470920852704702453791150816651748699850802077496401200540770812614019887976202056355968666272860287405453205403352469755008593531271583992042877002254693363632703453256269834100747012285456425563958785526
A = 633175010278458588242407992139835393471229244968771694070089014906714064008657545445487933938730429395960344188148181497359946796056759670084958157114029180226346471210560851381369779507011436994851806218760651244901192583877603841735351123164712811035183206289594374440669499888764471799482088493886503657344932325721021132360658969502452077210090781496988017008234109093012475598084728514423428019373840440080372588419676480690243831403685009550184425380788070230048714956058651348089402050029060160051873209293881511710749202333483795870074214310530173152506214145583442004581433759155645261854549950410859059221242919295038769636532584150233347577398530968125303824642468279792426305012224026747207535404080405257723440225778848883174998396772355571258576943646295092760127801694491105495285864351440527021260428776552006043011568548509462199536987491117927484806567051843189715425899520871665144412073826756546388656806
B = 517338135978193682313227432164169293625392457387876676586061989424431317607457538471147534236026684003020243108354527636268094620145432898943200609405610063503987030809088241425351099052919755326958065624538820594763423765534865048763169078783034580947614331368741612332956077362522041465803597895901231551769948307105665462199099593871625379567483231924829746794952142902644507370665407272266463449746518077241405415421362190601968546028539124137372268852360563705024596352225603425560746491750839161630221181715687720952331484792111309934672559912956375638132649852787731791291899995157653943989825714370207732995415609687085590388932746697111627004623651184233186791879229248179581777372006070732930760942584729469284684266996055531741147883603751078311882822223351998763802860588345983072439822940902160472068167432112923994764548254998626627031544649325167117477018657410349871019370428418819606984674552362278372729994
C = 1018987746926688384358397511293230778949869771506352250351434042185261917459669514605603778756624245951286828896009487681072805178545078432250404760858225884304203660603584961446363479412549418391607774087161650412437158681856627253069097878432221834723861757668942441581829539129179672080402459769193369777993107519713810754284555735356852003353434010812724707133640642464259699539402911923101990585059331332723668419033967099333364301798652287882745200194060885235345181083315875907811943724578841986218770436392272513260567358717313280197429452021724418704382085579741447471527063082195175722974472275327016852389349461411129485551220064674841436399498372797932910261304303627179753473108531459559432903206586820356817598735788386053416091893479282463364957208892161084617633297657208109339872395100074781901249203643216507804018906916067152314683591740632319678735171845965321018645993150222406403428285285726588617132946
e = 65537

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

P1 = abs(pow(A,2) - B)
Q1 = abs(pow(A,5) - pow(C,3))
R1 = abs(pow(B,5) - pow(C,6))
p = gcd(P1, N)
q = gcd(Q1, N)
r = gcd(R1, N)

phi = (p-1)*(q-1)*(r-1)
d = pow(e, -1, phi)
flag = long_to_bytes(int(pow(ct, d, N)))

print(flag[:47].decode('utf-8'))
# Do lúc đầu chạy bị lỗi tại kí tự thứ 47 nên mình chỉ lấy 47 ký tự đầu